<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{79b373eb-1c8e-4458-8b04-107fcef16361}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	test_bool:BOOL;
	test_int:INT;
	test_real:REAL;
	test_string:STRING;
	test_arr_int:ARRAY[1..10] OF INT;
	test_word:WORD;
	test_arr_bool:ARRAY[1..3] OF BOOL;
	test_structure:user_defined_structure;
	test_arr_string:ARRAY[1..3] OF STRING;
	
	fb_Time : FB_LocalSystemTime;

	byte1 : BYTE;
	string1 :STRING;

	iInit	: int;
	i	: INT;
	j	: INT;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fb_Time(bEnable := TRUE); 

M_mappingIO();
M_measuringLC();
M_rfid();
runEveryCycle();
M_ReM();

//GVL.fbconverter[0](stConverter:= GVL.stConverter[0]);
//GVL.fbconverter.M_SetPara(iMotor:=0,iCmd:=1);

//GVL.stConverter[0].sNetID	:= '192.168.11.159.5.1';
//GVL.stConverter[0].nSlaveAddr	:= 1058;
(*CASE iInit OF
	0:

	;
	1:
	IF GVL.fbconverter[0].M_SetPara(iMotor:=0) THEN
		iInit	:= 0;
		;
	END_IF

END_CASE*)

GVL.stConverter[0].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[0].nSlaveAddr	:= 1003;//lb[0]
GVL.stConverter[1].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[1].nSlaveAddr	:= 1005;//lc[0]
GVL.stConverter[2].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[2].nSlaveAddr	:= 1008;//pm[0]_inner
GVL.stConverter[3].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[3].nSlaveAddr	:= 1009;//pm[0]_outer
GVL.stConverter[4].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[4].nSlaveAddr	:= 1018;//pm[1]_inner
GVL.stConverter[5].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[5].nSlaveAddr	:= 1019;//pm[1]_outer
GVL.stConverter[6].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[6].nSlaveAddr	:= 1026;//pm[2]_inner
GVL.stConverter[7].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[7].nSlaveAddr	:= 1027;//pm[2]_outer
GVL.stConverter[8].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[8].nSlaveAddr	:= 1034;//pm[3]_inner
GVL.stConverter[9].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[9].nSlaveAddr	:= 1035;//pm[3]_outer
GVL.stConverter[10].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[10].nSlaveAddr	:= 1044;//pm[4]_inner
GVL.stConverter[11].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[11].nSlaveAddr	:= 1045;//pm[4]_outer
GVL.stConverter[12].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[12].nSlaveAddr	:= 1052;//lb[1]
GVL.stConverter[13].sNetID	:= '192.168.11.159.5.1';
GVL.stConverter[13].nSlaveAddr	:= 1054;//lc[1]

GVL.lb[0].belt[0].fbconverter(stConverter:=GVL.stConverter[0],iMotor:=0);
GVL.lb[0].belt[1].fbconverter(stConverter:=GVL.stConverter[0],iMotor:=1);
GVL.lb[0].belt[2].fbconverter(stConverter:=GVL.stConverter[0],iMotor:=2);
GVL.lc[0].belt_out.belt.fbconverter(stConverter:=GVL.stConverter[1],iMotor:=0);
GVL.pm[0].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[2],iMotor:=0);
GVL.pm[0].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[2],iMotor:=1);
GVL.pm[0].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[2],iMotor:=2);
GVL.pm[1].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[2],iMotor:=3);
GVL.pm[1].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[2],iMotor:=4);
GVL.pm[1].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[2],iMotor:=5);
GVL.pm[0].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[3],iMotor:=0);
GVL.pm[0].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[3],iMotor:=1);
GVL.pm[1].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[3],iMotor:=2);
GVL.pm[1].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[3],iMotor:=3);
GVL.pm[2].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[4],iMotor:=0);
GVL.pm[2].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[4],iMotor:=1);
GVL.pm[2].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[4],iMotor:=2);
GVL.pm[3].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[4],iMotor:=3);
GVL.pm[3].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[4],iMotor:=4);
GVL.pm[3].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[4],iMotor:=5);
GVL.pm[2].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[5],iMotor:=0);
GVL.pm[2].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[5],iMotor:=1);
GVL.pm[3].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[5],iMotor:=2);
GVL.pm[3].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[5],iMotor:=3);
GVL.pm[4].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[6],iMotor:=0);
GVL.pm[4].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[6],iMotor:=1);
GVL.pm[4].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[6],iMotor:=2);
GVL.pm[5].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[6],iMotor:=3);
GVL.pm[5].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[6],iMotor:=4);
GVL.pm[5].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[6],iMotor:=5);
GVL.pm[4].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[7],iMotor:=0);
GVL.pm[4].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[7],iMotor:=1);
GVL.pm[5].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[7],iMotor:=2);
GVL.pm[5].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[7],iMotor:=3);
GVL.pm[6].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[8],iMotor:=0);
GVL.pm[6].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[8],iMotor:=1);
GVL.pm[6].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[8],iMotor:=2);
GVL.pm[7].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[8],iMotor:=3);
GVL.pm[7].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[8],iMotor:=4);
GVL.pm[7].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[8],iMotor:=5);
GVL.pm[6].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[9],iMotor:=0);
GVL.pm[6].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[9],iMotor:=1);
GVL.pm[7].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[9],iMotor:=2);
GVL.pm[7].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[9],iMotor:=3);
GVL.pm[8].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[10],iMotor:=0);
GVL.pm[8].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[10],iMotor:=1);
GVL.pm[8].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[10],iMotor:=2);
GVL.pm[9].inConv.belt[0].fbconverter(stConverter:= GVL.stConverter[10],iMotor:=3);
GVL.pm[9].inConv.belt[1].fbconverter(stConverter:= GVL.stConverter[10],iMotor:=4);
GVL.pm[9].inConv.belt[2].fbconverter(stConverter:= GVL.stConverter[10],iMotor:=5);
GVL.pm[8].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[11],iMotor:=0);
GVL.pm[8].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[11],iMotor:=1);
GVL.pm[9].outConv.belt[0].fbconverter(stConverter:= GVL.stConverter[11],iMotor:=2);
GVL.pm[9].outConv.belt[1].fbconverter(stConverter:= GVL.stConverter[11],iMotor:=3);
GVL.lb[1].belt[0].fbconverter(stConverter:=GVL.stConverter[12],iMotor:=0);
GVL.lb[1].belt[1].fbconverter(stConverter:=GVL.stConverter[12],iMotor:=1);
GVL.lb[1].belt[2].fbconverter(stConverter:=GVL.stConverter[12],iMotor:=2);
GVL.lc[1].belt_out.belt.fbconverter(stConverter:=GVL.stConverter[13],iMotor:=0);
(*
GVL.lb[0].belt[0].fbconverter 				:=GVL.fbconverterMoter[0];
GVL.lb[0].belt[1].fbconverter				:=GVL.fbconverterMoter[1];
GVL.lb[0].belt[2].fbconverter				:=GVL.fbconverterMoter[2];
GVL.lc[0].belt_out.belt.fbconverter			:=GVL.fbconverterMoter[3];
GVL.pm[0].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[4];
GVL.pm[0].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[5];
GVL.pm[0].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[6];
GVL.pm[1].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[7];
GVL.pm[1].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[8];
GVL.pm[1].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[9];
GVL.pm[0].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[10];
GVL.pm[0].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[11];
GVL.pm[1].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[12];
GVL.pm[1].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[13];
GVL.pm[2].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[14];
GVL.pm[2].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[15];
GVL.pm[2].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[16];
GVL.pm[3].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[17];
GVL.pm[3].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[18];
GVL.pm[3].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[19];
GVL.pm[2].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[20];
GVL.pm[2].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[21];
GVL.pm[3].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[22];
GVL.pm[3].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[23];
GVL.pm[4].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[24];
GVL.pm[4].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[25];
GVL.pm[4].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[26];
GVL.pm[5].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[27];
GVL.pm[5].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[28];
GVL.pm[5].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[29];
GVL.pm[4].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[30];
GVL.pm[4].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[31];
GVL.pm[5].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[32];
GVL.pm[5].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[33];
GVL.pm[6].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[34];
GVL.pm[6].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[35];
GVL.pm[6].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[36];
GVL.pm[7].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[37];
GVL.pm[7].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[38];
GVL.pm[7].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[39];
GVL.pm[6].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[40];
GVL.pm[6].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[41];
GVL.pm[7].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[42];
GVL.pm[7].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[43];
GVL.pm[8].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[44];
GVL.pm[8].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[45];
GVL.pm[8].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[46];
GVL.pm[9].inConv.belt[0].fbconverter		:=GVL.fbconverterMoter[47];
GVL.pm[9].inConv.belt[1].fbconverter		:=GVL.fbconverterMoter[48];
GVL.pm[9].inConv.belt[2].fbconverter		:=GVL.fbconverterMoter[49];
GVL.pm[8].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[50];
GVL.pm[8].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[51];
GVL.pm[9].outConv.belt[0].fbconverter		:=GVL.fbconverterMoter[52];
GVL.pm[9].outConv.belt[1].fbconverter		:=GVL.fbconverterMoter[53];
GVL.lb[1].belt[0].fbconverter				:=GVL.fbconverterMoter[54];
GVL.lb[1].belt[1].fbconverter				:=GVL.fbconverterMoter[55];
GVL.lb[1].belt[2].fbconverter				:=GVL.fbconverterMoter[56];
GVL.lc[1].belt_out.belt.fbconverter			:=GVL.fbconverterMoter[57];*)
(*
GVL.fbconverterMoter[0]		REF= GVL.lb[0].belt[0].fbconverter;
GVL.fbconverterMoter[1]		REF= GVL.lb[0].belt[1].fbconverter;
GVL.fbconverterMoter[2]		REF= GVL.lb[0].belt[2].fbconverter;
GVL.fbconverterMoter[3]		REF= GVL.lc[0].belt_out.belt.fbconverter;
GVL.fbconverterMoter[4]		REF= GVL.pm[0].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[5]		REF= GVL.pm[0].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[6]		REF= GVL.pm[0].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[7]		REF= GVL.pm[1].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[8]		REF= GVL.pm[1].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[9]		REF= GVL.pm[1].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[10]	REF= GVL.pm[0].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[11]	REF= GVL.pm[0].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[12]	REF= GVL.pm[1].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[13]	REF= GVL.pm[1].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[14]	REF= GVL.pm[2].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[15]	REF= GVL.pm[2].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[16]	REF= GVL.pm[2].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[17]	REF= GVL.pm[3].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[18]	REF= GVL.pm[3].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[19]	REF= GVL.pm[3].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[20]	REF= GVL.pm[2].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[21]	REF= GVL.pm[2].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[22]	REF= GVL.pm[3].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[23]	REF= GVL.pm[3].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[24]	REF= GVL.pm[4].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[25]	REF= GVL.pm[4].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[26]	REF= GVL.pm[4].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[27]	REF= GVL.pm[5].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[28]	REF= GVL.pm[5].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[29]	REF= GVL.pm[5].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[30]	REF= GVL.pm[4].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[31]	REF= GVL.pm[4].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[32]	REF= GVL.pm[5].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[33]	REF= GVL.pm[5].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[34]	REF= GVL.pm[6].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[35]	REF= GVL.pm[6].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[36]	REF= GVL.pm[6].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[37]	REF= GVL.pm[7].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[38]	REF= GVL.pm[7].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[39]	REF= GVL.pm[7].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[40]	REF= GVL.pm[6].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[41]	REF= GVL.pm[6].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[42]	REF= GVL.pm[7].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[43]	REF= GVL.pm[7].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[44]	REF= GVL.pm[8].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[45]	REF= GVL.pm[8].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[46]	REF= GVL.pm[8].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[47]	REF= GVL.pm[9].inConv.belt[0].fbconverter;
GVL.fbconverterMoter[48]	REF= GVL.pm[9].inConv.belt[1].fbconverter;
GVL.fbconverterMoter[49]	REF= GVL.pm[9].inConv.belt[2].fbconverter;
GVL.fbconverterMoter[50]	REF= GVL.pm[8].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[51]	REF= GVL.pm[8].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[52]	REF= GVL.pm[9].outConv.belt[0].fbconverter;
GVL.fbconverterMoter[53]	REF= GVL.pm[9].outConv.belt[1].fbconverter;
GVL.fbconverterMoter[54]	REF= GVL.lb[1].belt[0].fbconverter;
GVL.fbconverterMoter[55]	REF= GVL.lb[1].belt[1].fbconverter;
GVL.fbconverterMoter[56]	REF= GVL.lb[1].belt[2].fbconverter;
GVL.fbconverterMoter[57]	REF= GVL.lc[1].belt_out.belt.fbconverter;
*)
GVL.ref_fbconverterMotors	REF= GVL.lc[1].belt_out.belt.fbconverter;


(*CASE iInit OF
	0:
		FOR i:=0 TO 57 DO
			GVL.fbconverterMoter[i].bSetParaEx	:= FALSE;
		END_FOR
	1:
		FOR i:=0 TO 57 DO
			GVL.fbconverterMoter[i].bSetParaEx	:= TRUE;
		END_FOR
		IF GVL.fbconverterMoter[57].xDone THEN
			iInit	:=2;
		END_IF
	2:
		FOR i:=0 TO 57 DO
			GVL.fbconverterMoter[i].bSetParaEx	:= FALSE;
		END_FOR
		iInit	:=0;

END_CASE
*)

]]></ST>
    </Implementation>
    <Method Name="M_mappingIO" Id="{e0caa2a2-200b-484a-9495-8cf8901a2628}">
      <Declaration><![CDATA[METHOD M_mappingIO 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[////////////////////////////////////////////////////ReM////////////////////////////////////////////////////////////////
GVL.fb_remIOmapping[0](iReM:= 0);
GVL.fb_remIOmapping[1](iReM:= 1);
GVL.fb_remIOmapping[2](iReM:= 2);
GVL.fb_remIOmapping[3](iReM:= 3);
GVL.fb_remIOmapping[4](iReM:= 4);
GVL.fb_remIOmapping[5](iReM:= 5);
GVL.fb_remIOmapping[6](iReM:= 6);
GVL.fb_remIOmapping[7](iReM:= 7);
GVL.fb_remIOmapping[8](iReM:= 8);
GVL.fb_remIOmapping[9](iReM:= 9);
GVL.fb_remAxisMapping[0](iReM :=0,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1005);
GVL.fb_remAxisMapping[1](iReM :=0,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1006);
GVL.fb_remAxisMapping[2](iReM :=1,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1009);
GVL.fb_remAxisMapping[3](iReM :=1,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1010);
GVL.fb_remAxisMapping[4](iReM :=2,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1013);
GVL.fb_remAxisMapping[5](iReM :=2,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1014);
GVL.fb_remAxisMapping[6](iReM :=3,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1017);
GVL.fb_remAxisMapping[7](iReM :=3,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1018);
GVL.fb_remAxisMapping[8](iReM :=4,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1021);
GVL.fb_remAxisMapping[9](iReM :=4,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1022);
GVL.fb_remAxisMapping[10](iReM :=5,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1025);
GVL.fb_remAxisMapping[11](iReM :=5,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1026);
GVL.fb_remAxisMapping[12](iReM :=6,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1029);
GVL.fb_remAxisMapping[13](iReM :=6,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1030);
GVL.fb_remAxisMapping[14](iReM :=7,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1033);
GVL.fb_remAxisMapping[15](iReM :=7,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1034);
GVL.fb_remAxisMapping[16](iReM :=8,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1037);
GVL.fb_remAxisMapping[17](iReM :=8,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1038);
GVL.fb_remAxisMapping[18](iReM :=9,iLift:=0,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1041);
GVL.fb_remAxisMapping[19](iReM :=9,iLift:=1,sNetID:='192.168.11.159.4.1',nSlaveAddr:=1042);
GVL.fbAxisCtrl_Lift[0](stAxisCtrl:=GVL.stAxisCtrl_Lift[0],IN_OUT:=GVL.rem[0].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[1](stAxisCtrl:=GVL.stAxisCtrl_Lift[1],IN_OUT:=GVL.rem[0].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[2](stAxisCtrl:=GVL.stAxisCtrl_Lift[2],IN_OUT:=GVL.rem[1].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[3](stAxisCtrl:=GVL.stAxisCtrl_Lift[3],IN_OUT:=GVL.rem[1].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[4](stAxisCtrl:=GVL.stAxisCtrl_Lift[4],IN_OUT:=GVL.rem[2].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[5](stAxisCtrl:=GVL.stAxisCtrl_Lift[5],IN_OUT:=GVL.rem[2].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[6](stAxisCtrl:=GVL.stAxisCtrl_Lift[6],IN_OUT:=GVL.rem[3].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[7](stAxisCtrl:=GVL.stAxisCtrl_Lift[7],IN_OUT:=GVL.rem[3].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[8](stAxisCtrl:=GVL.stAxisCtrl_Lift[8],IN_OUT:=GVL.rem[4].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[9](stAxisCtrl:=GVL.stAxisCtrl_Lift[9],IN_OUT:=GVL.rem[4].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[10](stAxisCtrl:=GVL.stAxisCtrl_Lift[10],IN_OUT:=GVL.rem[5].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[11](stAxisCtrl:=GVL.stAxisCtrl_Lift[11],IN_OUT:=GVL.rem[5].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[12](stAxisCtrl:=GVL.stAxisCtrl_Lift[12],IN_OUT:=GVL.rem[6].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[13](stAxisCtrl:=GVL.stAxisCtrl_Lift[13],IN_OUT:=GVL.rem[6].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[14](stAxisCtrl:=GVL.stAxisCtrl_Lift[14],IN_OUT:=GVL.rem[7].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[15](stAxisCtrl:=GVL.stAxisCtrl_Lift[15],IN_OUT:=GVL.rem[7].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[16](stAxisCtrl:=GVL.stAxisCtrl_Lift[16],IN_OUT:=GVL.rem[8].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[17](stAxisCtrl:=GVL.stAxisCtrl_Lift[17],IN_OUT:=GVL.rem[8].lift[1].st_mcAxis);
GVL.fbAxisCtrl_Lift[18](stAxisCtrl:=GVL.stAxisCtrl_Lift[18],IN_OUT:=GVL.rem[9].lift[0].st_mcAxis);
GVL.fbAxisCtrl_Lift[19](stAxisCtrl:=GVL.stAxisCtrl_Lift[19],IN_OUT:=GVL.rem[9].lift[1].st_mcAxis);


////////////////////////////////////////////////////PM////////////////////////////////////////////////////////////////
GVL.fb_rmIOmapping[0](iRm:= 0);
GVL.fb_rmIOmapping[1](iRm:= 1);
GVL.fb_rmIOmapping[2](iRm:= 2);
GVL.fb_rmIOmapping[3](iRm:= 3);
GVL.fb_rmIOmapping[4](iRm:= 4);
GVL.fb_pmAxisMapping[0](iPM :=0,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1010);
GVL.fb_pmAxisMapping[1](iPM :=0,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1011);
GVL.fb_pmAxisMapping[2](iPM :=1,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1012);
GVL.fb_pmAxisMapping[3](iPM :=1,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1013);
GVL.fb_pmAxisMapping[4](iPM :=2,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1020);
GVL.fb_pmAxisMapping[5](iPM :=2,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1021);
GVL.fb_pmAxisMapping[6](iPM :=3,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1022);
GVL.fb_pmAxisMapping[7](iPM :=3,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1023);
GVL.fb_pmAxisMapping[8](iPM :=4,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1028);
GVL.fb_pmAxisMapping[9](iPM :=4,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1029);
GVL.fb_pmAxisMapping[10](iPM :=5,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1030);
GVL.fb_pmAxisMapping[11](iPM :=5,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1031);
GVL.fb_pmAxisMapping[12](iPM :=6,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1036);
GVL.fb_pmAxisMapping[13](iPM :=6,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1047);
GVL.fb_pmAxisMapping[14](iPM :=7,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1038);
GVL.fb_pmAxisMapping[15](iPM :=7,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1039);
GVL.fb_pmAxisMapping[16](iPM :=8,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1046);
GVL.fb_pmAxisMapping[17](iPM :=8,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1047);
GVL.fb_pmAxisMapping[18](iPM :=9,iBuffer:=0,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1048);
GVL.fb_pmAxisMapping[19](iPM :=9,iBuffer:=1,sNetID:='192.168.11.159.5.1',nSlaveAddr:=1049);

GVL.fbAxisCtrl_Buffer[0](stAxisCtrl:=GVL.stAxisCtrl_Buffer[0],IN_OUT:=GVL.pm[0].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[1](stAxisCtrl:=GVL.stAxisCtrl_Buffer[1],IN_OUT:=GVL.pm[0].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[2](stAxisCtrl:=GVL.stAxisCtrl_Buffer[2],IN_OUT:=GVL.pm[1].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[3](stAxisCtrl:=GVL.stAxisCtrl_Buffer[3],IN_OUT:=GVL.pm[1].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[4](stAxisCtrl:=GVL.stAxisCtrl_Buffer[4],IN_OUT:=GVL.pm[2].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[5](stAxisCtrl:=GVL.stAxisCtrl_Buffer[5],IN_OUT:=GVL.pm[2].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[6](stAxisCtrl:=GVL.stAxisCtrl_Buffer[6],IN_OUT:=GVL.pm[3].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[7](stAxisCtrl:=GVL.stAxisCtrl_Buffer[7],IN_OUT:=GVL.pm[3].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[8](stAxisCtrl:=GVL.stAxisCtrl_Buffer[8],IN_OUT:=GVL.pm[4].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[9](stAxisCtrl:=GVL.stAxisCtrl_Buffer[9],IN_OUT:=GVL.pm[4].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[10](stAxisCtrl:=GVL.stAxisCtrl_Buffer[10],IN_OUT:=GVL.pm[5].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[11](stAxisCtrl:=GVL.stAxisCtrl_Buffer[11],IN_OUT:=GVL.pm[5].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[12](stAxisCtrl:=GVL.stAxisCtrl_Buffer[12],IN_OUT:=GVL.pm[6].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[13](stAxisCtrl:=GVL.stAxisCtrl_Buffer[13],IN_OUT:=GVL.pm[6].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[14](stAxisCtrl:=GVL.stAxisCtrl_Buffer[14],IN_OUT:=GVL.pm[7].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[15](stAxisCtrl:=GVL.stAxisCtrl_Buffer[15],IN_OUT:=GVL.pm[7].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[16](stAxisCtrl:=GVL.stAxisCtrl_Buffer[16],IN_OUT:=GVL.pm[8].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[17](stAxisCtrl:=GVL.stAxisCtrl_Buffer[17],IN_OUT:=GVL.pm[8].buffer[1].st_mcAxis);
GVL.fbAxisCtrl_Buffer[18](stAxisCtrl:=GVL.stAxisCtrl_Buffer[18],IN_OUT:=GVL.pm[9].buffer[0].st_mcAxis);
GVL.fbAxisCtrl_Buffer[19](stAxisCtrl:=GVL.stAxisCtrl_Buffer[19],IN_OUT:=GVL.pm[9].buffer[1].st_mcAxis);


////////////////////////////////////////////////////LC&LB&FR////////////////////////////////////////////////////////////////
GVL.fb_lcIOmappiing[0](iLc:= 0,mcAxis:=GVL.fb_lcAxis[0],IN_OUT:=GVL.stAxis_LC[0],nSlaveAddr:=1006,sNetID:='192.168.11.159.5.1');
GVL.fb_lcIOmappiing[1](iLc:= 1,mcAxis:=GVL.fb_lcAxis[1],IN_OUT:=GVL.stAxis_LC[1],nSlaveAddr:=1055,sNetID:='192.168.11.159.5.1');
GVL.fb_lbIOmappiing[0](iLb:=0);
GVL.fb_lbIOmappiing[1](iLb:=1);
(*GVL.arrSenDetect[1] := G_IO.arDI[4].Ch[0];
GVL.arrSenDetect[2] := G_IO.arDI[4].Ch[1];
GVL.arrSenDetect[3] := G_IO.arDI[4].Ch[2];
GVL.arrSenDetect[4] := G_IO.arDI[4].Ch[3];
GVL.arrSenDetect[5] := G_IO.arDI[4].Ch[4];*)

(*GVL.rem[0].infeed[0].roller.err						:= G_IO.arDI[0].Ch[0];
GVL.rem[0].infeed[0].valve_stopper.extended  		:= G_IO.arDI[0].Ch[1];
GVL.rem[0].infeed[0].valve_stopper.retracted  		:= G_IO.arDI[0].Ch[2];
GVL.rem[0].infeed[0].photo_sensor[0].set_status(G_IO.arDI[0].Ch[3],10,50);
GVL.rem[0].infeed[0].photo_sensor[1].set_status(G_IO.arDI[0].Ch[4],10,50);
GVL.rem[0].outfeed[0].roller.err					:= G_IO.arDI[0].Ch[5];
GVL.rem[0].outfeed[0].photo_sensor[0].set_status(G_IO.arDI[0].Ch[6],10,50);
GVL.rem[0].outfeed[0].photo_sensor[1].set_status(G_IO.arDI[0].Ch[7],10,50);
GVL.rem[0].lift[0].roller.err						:= G_IO.arDI[0].Ch[8];
GVL.rem[0].lift[0].contactor_axis						:= G_IO.arDI[0].Ch[9];
//GVL.rem[0].lift[0].limit_sensor[0]	:= TRUE;
//GVL.rem[0].lift[0].limit_sensor[1]	:= TRUE;
//GVL.rem[0].lift[0].limit_sensor[2]	:= TRUE;
GVL.rem[0].lift[0].limit_sensor[0]	:= G_IO.arDI[0].Ch[10];
GVL.rem[0].lift[0].limit_sensor[1]	:= G_IO.arDI[0].Ch[11];
GVL.rem[0].lift[0].limit_sensor[2]	:= G_IO.arDI[0].Ch[12];
GVL.rem[0].lift[0].valve_perturbation[0].extended  	:= G_IO.arDI[0].Ch[13];
GVL.rem[0].lift[0].valve_perturbation[0].retracted 	:= G_IO.arDI[0].Ch[14];
GVL.rem[0].lift[0].valve_perturbation[1].extended  	:= G_IO.arDI[0].Ch[15];
GVL.rem[0].lift[0].valve_perturbation[1].retracted 	:= G_IO.arDI[1].Ch[0];
GVL.rem[0].lift[0].valve_perturbation[2].extended  	:= G_IO.arDI[1].Ch[1];
GVL.rem[0].lift[0].valve_perturbation[2].retracted 	:= G_IO.arDI[1].Ch[2];
GVL.rem[0].lift[0].valve_perturbation[3].extended  	:= G_IO.arDI[1].Ch[3];
GVL.rem[0].lift[0].valve_perturbation[3].retracted	:= G_IO.arDI[1].Ch[4];
GVL.rem[0].lift[0].valve_clamp.extended  := G_IO.arDI[1].Ch[5];
GVL.rem[0].lift[0].valve_clamp.retracted  := G_IO.arDI[1].Ch[6];
GVL.rem[0].lift[0].photo_sensor[0].set_status(G_IO.arDI[1].Ch[7],10,50);
GVL.rem[0].lift[0].photo_sensor[1].set_status(G_IO.arDI[1].Ch[8],10,50);

G_IO.arDO[0].Ch[0]	:= GVL.rem[0].infeed[0].roller.Power;
G_IO.arDO[0].Ch[1]	:= GVL.rem[0].infeed[0].roller.forward;
G_IO.arDO[0].Ch[2]	:= GVL.rem[0].infeed[0].roller.backward;
G_IO.arDO[0].Ch[3]	:= GVL.rem[0].outfeed[0].roller.Power;
G_IO.arDO[0].Ch[4]	:= GVL.rem[0].outfeed[0].roller.forward;
G_IO.arDO[0].Ch[5]	:= GVL.rem[0].outfeed[0].roller.backward;
G_IO.arDO[0].Ch[6]	:= GVL.rem[0].lift[0].roller.Power;
G_IO.arDO[0].Ch[7]	:= GVL.rem[0].lift[0].roller.forward;
G_IO.arDO[0].Ch[8]	:= GVL.rem[0].lift[0].roller.backward;
G_IO.arDO[0].Ch[9]	:= GVL.rem[0].lift[0].power_axis;
G_IO.arDO[2].Ch[0]	:= GVL.rem[0].infeed[0].valve_stopper.extend;
G_IO.arDO[2].Ch[1]	:= GVL.rem[0].infeed[0].valve_stopper.retract;
G_IO.arDO[2].Ch[2]	:= GVL.rem[0].lift[0].valve_perturbation[0].extend;
G_IO.arDO[2].Ch[4]	:= GVL.rem[0].lift[0].valve_perturbation[1].extend;
G_IO.arDO[2].Ch[6]	:= GVL.rem[0].lift[0].valve_perturbation[2].extend;
G_IO.arDO[2].Ch[8]	:= GVL.rem[0].lift[0].valve_perturbation[3].extend;
G_IO.arDO[2].Ch[10]	:= GVL.rem[0].lift[0].valve_clamp.extend;
G_IO.arDO[2].Ch[11]	:= GVL.rem[0].lift[0].valve_clamp.retract;



GVL.rem[0].infeed[1].roller.err	:= G_IO.arDI[2].Ch[0];
GVL.rem[0].infeed[1].valve_stopper.extended  := G_IO.arDI[2].Ch[1];
GVL.rem[0].infeed[1].valve_stopper.retracted  := G_IO.arDI[2].Ch[2];
GVL.rem[0].infeed[1].photo_sensor[0].set_status(G_IO.arDI[2].Ch[3],10,50);
GVL.rem[0].infeed[1].photo_sensor[1].set_status(G_IO.arDI[2].Ch[4],10,50);
GVL.rem[0].outfeed[1].roller.err	:= G_IO.arDI[2].Ch[5];
GVL.rem[0].outfeed[1].photo_sensor[0].set_status(G_IO.arDI[2].Ch[6],10,50);
GVL.rem[0].outfeed[1].photo_sensor[1].set_status(G_IO.arDI[2].Ch[7],10,50);
GVL.rem[0].lift[1].roller.err	:= G_IO.arDI[2].Ch[8];
GVL.rem[0].lift[1].contactor_axis	:= G_IO.arDI[2].Ch[9];
//GVL.rem[0].lift[1].limit_sensor[0]	:= TRUE;
//GVL.rem[0].lift[1].limit_sensor[1]	:= TRUE;
//GVL.rem[0].lift[1].limit_sensor[2]	:= TRUE;
GVL.rem[0].lift[1].limit_sensor[0]	:= G_IO.arDI[2].Ch[10];
GVL.rem[0].lift[1].limit_sensor[1]	:= G_IO.arDI[2].Ch[11];
GVL.rem[0].lift[1].limit_sensor[2]	:= G_IO.arDI[2].Ch[12];
GVL.rem[0].lift[1].valve_perturbation[0].extended  := G_IO.arDI[2].Ch[13];
GVL.rem[0].lift[1].valve_perturbation[0].retracted  := G_IO.arDI[2].Ch[14];
GVL.rem[0].lift[1].valve_perturbation[1].extended  := G_IO.arDI[2].Ch[15];
GVL.rem[0].lift[1].valve_perturbation[1].retracted  := G_IO.arDI[3].Ch[0];
GVL.rem[0].lift[1].valve_perturbation[2].extended  := G_IO.arDI[3].Ch[1];
GVL.rem[0].lift[1].valve_perturbation[2].retracted  := G_IO.arDI[3].Ch[2];
GVL.rem[0].lift[1].valve_perturbation[3].extended  := G_IO.arDI[3].Ch[3];
GVL.rem[0].lift[1].valve_perturbation[3].retracted  := G_IO.arDI[3].Ch[4];
GVL.rem[0].lift[1].valve_clamp.extended  := G_IO.arDI[3].Ch[5];
GVL.rem[0].lift[1].valve_clamp.retracted  := G_IO.arDI[3].Ch[6];
GVL.rem[0].lift[1].photo_sensor[0].set_status(G_IO.arDI[3].Ch[7],10,50);
GVL.rem[0].lift[1].photo_sensor[1].set_status(G_IO.arDI[3].Ch[8],10,50);

G_IO.arDO[1].Ch[0]	:= GVL.rem[0].infeed[1].roller.Power;
G_IO.arDO[1].Ch[1]	:= GVL.rem[0].infeed[1].roller.forward;
G_IO.arDO[1].Ch[2]	:= GVL.rem[0].infeed[1].roller.backward;
G_IO.arDO[1].Ch[3]	:= GVL.rem[0].outfeed[1].roller.Power;
G_IO.arDO[1].Ch[4]	:= GVL.rem[0].outfeed[1].roller.forward;
G_IO.arDO[1].Ch[5]	:= GVL.rem[0].outfeed[1].roller.backward;
G_IO.arDO[1].Ch[6]	:= GVL.rem[0].lift[1].roller.Power;
G_IO.arDO[1].Ch[7]	:= GVL.rem[0].lift[1].roller.forward;
G_IO.arDO[1].Ch[8]	:= GVL.rem[0].lift[1].roller.backward;
G_IO.arDO[1].Ch[9]	:= GVL.rem[0].lift[1].power_axis;
G_IO.arDO[2].Ch[12]	:= GVL.rem[0].infeed[1].valve_stopper.extend;
G_IO.arDO[2].Ch[13]	:= GVL.rem[0].infeed[1].valve_stopper.retract;
G_IO.arDO[2].Ch[14]	:= GVL.rem[0].lift[1].valve_perturbation[0].extend;
G_IO.arDO[3].Ch[0]	:= GVL.rem[0].lift[1].valve_perturbation[1].extend;
G_IO.arDO[3].Ch[2]	:= GVL.rem[0].lift[1].valve_perturbation[2].extend;
G_IO.arDO[3].Ch[4]	:= GVL.rem[0].lift[1].valve_perturbation[3].extend;
G_IO.arDO[3].Ch[6]	:= GVL.rem[0].lift[1].valve_clamp.extend;
G_IO.arDO[3].Ch[7]	:= GVL.rem[0].lift[1].valve_clamp.retract;*)


//////////////////////////////PM[0]///////////////////////////////////
(*GVL.pm[0].buffer[0].contractor_axis				:= G_IO.arDI[50].Ch[0];
GVL.pm[0].buffer[0].axis_sensor					:= G_IO.arDI[50].Ch[1];
GVL.pm[0].buffer[0].surfae_slot_0				:= G_IO.arDI[50].Ch[2];
GVL.pm[0].buffer[0].surfae_slot_1				:= G_IO.arDI[50].Ch[3];
GVL.pm[0].buffer[0].surfae_slot_2				:= G_IO.arDI[50].Ch[4];
GVL.pm[0].buffer[0].above_fixture_light_curtain	:= G_IO.arDI[50].Ch[5];
GVL.pm[0].buffer[0].button						:= G_IO.arDI[50].Ch[6];
GVL.pm[0].buffer[0].locked						:= G_IO.arDI[50].Ch[7];
GVL.pm[0].buffer[0].magnet_locked				:= G_IO.arDI[50].Ch[8];
GVL.pm[0].buffer[1].contractor_axis				:= G_IO.arDI[50].Ch[9];
GVL.pm[0].buffer[1].axis_sensor					:= G_IO.arDI[50].Ch[10];
GVL.pm[0].buffer[1].surfae_slot_0				:= G_IO.arDI[50].Ch[11];
GVL.pm[0].buffer[1].surfae_slot_1				:= G_IO.arDI[50].Ch[12];
GVL.pm[0].buffer[1].surfae_slot_2				:= G_IO.arDI[50].Ch[13];
GVL.pm[0].buffer[1].above_fixture_light_curtain	:= G_IO.arDI[50].Ch[14];
GVL.pm[0].buffer[1].button						:= G_IO.arDI[50].Ch[15];
GVL.pm[0].buffer[1].locked						:= G_IO.arDI[51].Ch[0];
GVL.pm[0].buffer[1].magnet_locked				:= G_IO.arDI[51].Ch[1];
GVL.pm[0].contactor_robot						:= G_IO.arDI[51].Ch[2];
GVL.pm[0].inConv.valve[0].extended				:= G_IO.arDI[51].Ch[3];
GVL.pm[0].inConv.valve[0].retracted				:= G_IO.arDI[51].Ch[4];
GVL.pm[0].inConv.valve[1].extended				:= G_IO.arDI[51].Ch[5];
GVL.pm[0].inConv.valve[1].retracted				:= G_IO.arDI[51].Ch[6];
GVL.pm[0].inConv.valve[2].extended				:= G_IO.arDI[51].Ch[7];
GVL.pm[0].inConv.valve[2].retracted				:= G_IO.arDI[51].Ch[8];
GVL.pm[0].outConv.photo_sensor[0]				:= G_IO.arDI[51].Ch[9];
GVL.pm[0].outConv.photo_sensor[1]				:= G_IO.arDI[51].Ch[10];
GVL.pm[0].outConv.valve[0].extended				:= G_IO.arDI[51].Ch[11];
GVL.pm[0].outConv.valve[0].retracted			:= G_IO.arDI[51].Ch[12];
GVL.pm[0].outConv.valve[1].extended				:= G_IO.arDI[51].Ch[13];
GVL.pm[0].outConv.valve[1].retracted			:= G_IO.arDI[51].Ch[14];


GVL.pm[0].contactor_inConv						:= G_IO.arDI[54].Ch[0];//share with pm[1]
GVL.pm[0].contactor_inConv						:= G_IO.arDI[54].Ch[1];//share with pm[1]

G_IO.arDO[50].Ch[0]	:= GVL.pm[0].buffer[0].power_axis;
G_IO.arDO[50].Ch[1]	:= GVL.pm[0].buffer[0].magnet;
G_IO.arDO[50].Ch[2]	:= GVL.pm[0].buffer[1].power_axis;
G_IO.arDO[50].Ch[3]	:= GVL.pm[0].buffer[1].magnet;
G_IO.arDO[50].Ch[4]	:= GVL.pm[0].power_robot;
G_IO.arDO[50].Ch[12]	:= GVL.pm[0].buffer[0].lamp_button;
G_IO.arDO[50].Ch[13]	:= GVL.pm[0].buffer[1].lamp_button;

G_IO.arDO[52].Ch[0]	:= GVL.pm[0].inConv.valve[0].extend;
G_IO.arDO[52].Ch[2]	:= GVL.pm[0].inConv.valve[1].extend;
G_IO.arDO[52].Ch[4]	:= GVL.pm[0].inConv.valve[2].extend;
G_IO.arDO[52].Ch[6]	:= GVL.pm[0].outConv.valve[0].extend;
G_IO.arDO[52].Ch[8]	:= GVL.pm[0].outConv.valve[1].extend;

G_IO.arDO[50].Ch[10]	:= GVL.pm[0].power_inConv;//share with pm[1]
G_IO.arDO[50].Ch[11]	:= GVL.pm[0].power_outConv;//share with pm[1]
*)
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_measuringLC" Id="{d676c292-2f0e-482c-8f77-a1f869b0f883}">
      <Declaration><![CDATA[METHOD M_measuringLC : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
	j: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i :=1 TO 32 DO
	GVL.ibyteNum[i] := i;
END_FOR
FOR i:=1 TO 32 DO	
	GVL.stMeasuringLC.arByte[i].Ch[0]	:= GVL.byteLC[i].0;
	GVL.stMeasuringLC.arByte[i].Ch[1]	:= GVL.byteLC[i].1;
	GVL.stMeasuringLC.arByte[i].Ch[2]	:= GVL.byteLC[i].2;
	GVL.stMeasuringLC.arByte[i].Ch[3]	:= GVL.byteLC[i].3;
	GVL.stMeasuringLC.arByte[i].Ch[4]	:= GVL.byteLC[i].4;
	GVL.stMeasuringLC.arByte[i].Ch[5]	:= GVL.byteLC[i].5;
	GVL.stMeasuringLC.arByte[i].Ch[6]	:= GVL.byteLC[i].6;
	GVL.stMeasuringLC.arByte[i].Ch[7]	:= GVL.byteLC[i].7;
END_FOR


GVL.stByte REF= GVL.stMeasuringLC;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReM" Id="{64ae7519-e3a0-402c-ae7d-63672adcb499}">
      <Declaration><![CDATA[METHOD M_ReM : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//========== Lift0 Axis Config ==========
(*GVL.rem[0].lift[0].mcAxis
(
	ZSN		:= GVL.rem[0].lift[0].limit_sensor[2] OR GVL.rem[0].lift[0].st_mcAxis.xHoming,
	ZSP		:= GVL.rem[0].lift[0].limit_sensor[1]	OR GVL.rem[0].lift[0].st_mcAxis.xHoming,
	IN_OUT	:= GVL.rem[0].lift[0].st_mcAxis, 
	AXIS	:= GVL.rem[0].lift[0].Axisref, 
);
GVL.rem[0].lift[0].st_mcAxis.bPosSensorShow	:= TRUE;
GVL.rem[0].lift[0].st_mcAxis.bNegSensorShow	:= TRUE;
GVL.rem[0].lift[0].st_mcAxis.bStopButtonShow	:= TRUE;
GVL.rem[0].lift[0].st_mcAxis.rMaxAcceleration	:= 50000;
GVL.rem[0].lift[0].st_mcAxis.rMaxDeceleration	:= 50000;
GVL.rem[0].lift[0].st_mcAxis.rMaxJerk			:= 500000;
GVL.rem[0].lift[0].st_mcAxis.rAcceleration	:= 2500;
GVL.rem[0].lift[0].st_mcAxis.rDeceleration	:= 2500;
GVL.rem[0].lift[0].st_mcAxis.rJerk			:= 12500;
GVL.rem[0].lift[0].st_mcAxis.rMaxVelocity		:= 100;
GVL.rem[0].lift[0].st_mcAxis.rMaxDistance		:= 50;
GVL.rem[0].lift[0].st_mcAxis.bPosSen	:= GVL.rem[0].lift[0].limit_sensor[1] ;
GVL.rem[0].lift[0].st_mcAxis.bNegSen	:= GVL.rem[0].lift[0].limit_sensor[2] ;
GVL.rem[0].lift[0].st_mcAxis.mcHome.bCalibrationCam	:= GVL.rem[0].lift[0].limit_sensor[0];
GVL.rem[0].lift[0].st_mcAxis.bPositionSensor	:= GVL.rem[0].lift[0].limit_sensor[0];
GVL.rem[0].lift[0].st_mcAxis.bdirFW	:= TRUE;
GVL.rem[0].lift[0].st_mcAxis.rSetPos	:= 0;
GVL.rem[0].lift[0].st_mcAxis.sNetID := '192.168.11.159.1.1';
GVL.rem[0].lift[0].st_mcAxis.nSlaveAddr	:= 1002;
//GVL.rem[0].lift[0].st_mcAxis.nSubIndex := 16#1F;
//GVL.rem[0].lift[0].st_mcAxis.nIndex	:= 16#2005;


//========== Lift1 Axis Config ==========
GVL.rem[0].lift[1].mcAxis
(
	ZSN		:= GVL.rem[0].lift[1].limit_sensor[2] OR GVL.rem[0].lift[1].st_mcAxis.xHoming,
	ZSP		:= GVL.rem[0].lift[1].limit_sensor[1]	OR GVL.rem[0].lift[1].st_mcAxis.xHoming,
	IN_OUT	:= GVL.rem[0].lift[1].st_mcAxis, 
	AXIS	:= GVL.rem[0].lift[1].Axisref, 
);
GVL.rem[0].lift[1].st_mcAxis.bPosSensorShow	:= TRUE;
GVL.rem[0].lift[1].st_mcAxis.bNegSensorShow	:= TRUE;
GVL.rem[0].lift[1].st_mcAxis.bStopButtonShow	:= TRUE;
GVL.rem[0].lift[1].st_mcAxis.rMaxAcceleration	:= 50000;
GVL.rem[0].lift[1].st_mcAxis.rMaxDeceleration	:= 50000;
GVL.rem[0].lift[1].st_mcAxis.rMaxJerk			:= 500000;
GVL.rem[0].lift[1].st_mcAxis.rAcceleration	:= 2500;
GVL.rem[0].lift[1].st_mcAxis.rDeceleration	:= 2500;
GVL.rem[0].lift[1].st_mcAxis.rJerk			:= 12500;
GVL.rem[0].lift[1].st_mcAxis.rMaxVelocity		:= 100;
GVL.rem[0].lift[1].st_mcAxis.rMaxDistance		:= 50;
GVL.rem[0].lift[1].st_mcAxis.bPosSen	:= GVL.rem[0].lift[1].limit_sensor[1] ;
GVL.rem[0].lift[1].st_mcAxis.bNegSen	:= GVL.rem[0].lift[1].limit_sensor[2] ;
GVL.rem[0].lift[1].st_mcAxis.mcHome.bCalibrationCam	:= GVL.rem[0].lift[1].limit_sensor[0];
GVL.rem[0].lift[1].st_mcAxis.bPositionSensor	:= GVL.rem[0].lift[1].limit_sensor[0];
GVL.rem[0].lift[1].st_mcAxis.bdirFW	:= TRUE;
GVL.rem[0].lift[1].st_mcAxis.rSetPos	:= 0;
GVL.rem[0].lift[1].st_mcAxis.sNetID := '192.168.11.159.1.1';
GVL.rem[0].lift[1].st_mcAxis.nSlaveAddr	:= 1003;
//GVL.rem[0].lift[1].st_mcAxis.nSubIndex := 16#1F;
//GVL.rem[0].lift[1].st_mcAxis.nIndex	:=  16#2005;

CASE GVL.iFRtest OF 
	0:		
		//IF GVL.rem[0].lift[0].st_mcAxis.xHomingDone THEN
			IF GVL.bTs1 THEN
				GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
				GVL.iFRtest :=1;
			END_IF
		//END_IF
	1://open positon
		GVL.rem[0].lift[0].st_mcAxis.rActualPosSet := 0;
		GVL.rem[0].lift[0].st_mcAxis.rVelocitySet := 300;			
		GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := TRUE;
		GVL.rem[0].lift[1].st_mcAxis.rActualPosSet := 0;
		GVL.rem[0].lift[1].st_mcAxis.rVelocitySet := 300;			
		GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Execute := TRUE;
		IF GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Done AND GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Done THEN
			GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
			GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
			GVL.iFRtest := 2;
		END_IF
	
	2:
		ton_delay.IN := TRUE;
		IF ton_delay.Q THEN
			ton_delay.IN := FALSE;
			GVL.iFRtest := 3;
		END_IF
	3://close position
		GVL.rem[0].lift[0].st_mcAxis.rActualPosSet := 424;
		GVL.rem[0].lift[0].st_mcAxis.rVelocitySet := 300;			
		GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := TRUE;
		GVL.rem[0].lift[1].st_mcAxis.rActualPosSet := 424;
		GVL.rem[0].lift[1].st_mcAxis.rVelocitySet := 300;			
		GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Execute := TRUE;		
		GVL.st_mcAxis[1].mcMoveAbsolute.Execute := TRUE;
			IF GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Done AND GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Done THEN
				GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
				GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
				GVL.iFRtest := 4;
			END_IF   
	4://delay
		ton_delay.IN := TRUE;
		IF ton_delay.Q THEN
			ton_delay.IN := FALSE;
			GVL.iFRtest := 5;
		END_IF
	5://open positon
		GVL.rem[0].lift[0].st_mcAxis.rActualPosSet := 0;
		GVL.rem[0].lift[0].st_mcAxis.rVelocitySet := 300;			
		GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := TRUE;
		GVL.rem[0].lift[1].st_mcAxis.rActualPosSet := 0;
		GVL.rem[0].lift[1].st_mcAxis.rVelocitySet := 300;			
		GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Execute := TRUE;
		IF GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Done AND GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Done THEN
			GVL.rem[0].lift[0].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
			GVL.rem[0].lift[1].st_mcAxis.mcMoveAbsolute.Execute := FALSE;
			GVL.iFRtest := 6;
		END_IF
	6:
		GVL.iFRtest := 0;
END_CASE*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_rfid" Id="{5c57c28f-978a-4ef1-8020-2ee35fe2b4f0}">
      <Declaration><![CDATA[METHOD M_rfid : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[byte1 := ASC(string1);
FOR i:=0 TO 3 DO	
	GVL.arIn[i].Ch[0]	:= GVL.rfidIn[i].0;
	GVL.arIn[i].Ch[1]	:= GVL.rfidIn[i].1;
	GVL.arIn[i].Ch[2]	:= GVL.rfidIn[i].2;
	GVL.arIn[i].Ch[3]	:= GVL.rfidIn[i].3;
	GVL.arIn[i].Ch[4]	:= GVL.rfidIn[i].4;
	GVL.arIn[i].Ch[5]	:= GVL.rfidIn[i].5;
	GVL.arIn[i].Ch[6]	:= GVL.rfidIn[i].6;
	GVL.arIn[i].Ch[7]	:= GVL.rfidIn[i].7;
	GVL.rfidOut[i].0	:= GVL.arOut[i].Ch[0];
	GVL.rfidOut[i].1	:= GVL.arOut[i].Ch[1];
	GVL.rfidOut[i].2	:= GVL.arOut[i].Ch[2];
	GVL.rfidOut[i].3	:= GVL.arOut[i].Ch[3];
	GVL.rfidOut[i].4	:= GVL.arOut[i].Ch[4];
	GVL.rfidOut[i].5	:= GVL.arOut[i].Ch[5];
	GVL.rfidOut[i].6	:= GVL.arOut[i].Ch[6];
	GVL.rfidOut[i].7	:= GVL.arOut[i].Ch[7];	
END_FOR

FOR i:=4 TO 31 DO
	GVL.rfidOut[i] := INT_TO_BYTE(28*GVL.n+i-3);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="runEveryCycle" Id="{79ccd451-642e-4685-afbb-6dd16a84c35a}">
      <Declaration><![CDATA[METHOD runEveryCycle : BOOL
VAR_INPUT
END_VAR

VAR
	


END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
CASE GVL.iFRtest OF 
	0:		
		IF GVL.st_mcAxis[0].xHomingDone THEN
			IF GVL.bTs1 THEN
				GVL.st_mcAxis[0].mcMoveAbsolute.Execute := FALSE;
				GVL.iFRtest :=1;
			END_IF
		END_IF
		IF GVL.bBeltTs THEN
			G_IO.arDI[5].Ch[2] := TRUE;
			G_IO.arDI[5].Ch[3] := TRUE;
			GVL.st_mcAxis[0].mcMoveAbsolute.Execute := FALSE;
			GVL.iFRtest :=100;
		END_IF
	100:
		GVL.st_mcAxis[0].rActualPosSet := 60000000;
		GVL.st_mcAxis[0].rVelocitySet := 150;	
		GVL.st_mcAxis[0].mcMoveAbsolute.Execute := TRUE;	
		IF NOT GVL.bBeltTs THEN
			GVL.st_mcAxis[0].mcMoveAbsolute.Execute := FALSE;
			GVL.st_mcAxis[0].mcStop.Execute := TRUE;
			IF GVL.st_mcAxis[0].mcStop.Done THEN
				GVL.st_mcAxis[0].mcStop.Execute := FALSE;
				GVL.iFRtest :=0;
			END_IF
			
		END_IF
	1://open positon
		valve := FALSE;
		IF retracted THEN
			GVL.st_mcAxis[0].rActualPosSet := 102.8;
			GVL.st_mcAxis[0].rVelocitySet := 300;			
			GVL.st_mcAxis[0].mcMoveAbsolute.Execute := TRUE;
			IF GVL.st_mcAxis[0].mcMoveAbsolute.Done THEN
				GVL.st_mcAxis[0].mcMoveAbsolute.Execute := FALSE;
				GVL.iFRtest := 2;
			END_IF
		END_IF
	2://valve extend
		valve := TRUE;
		IF extended THEN
			GVL.iFRtest := 3;
		END_IF
	3://delay
		ton_delay.IN := TRUE;
		IF ton_delay.Q THEN
			ton_delay.IN := FALSE;
			GVL.iFRtest := 4;
		END_IF
	4://close position
		GVL.st_mcAxis[0].rActualPosSet := -78.4;
		GVL.st_mcAxis[0].rVelocitySet := 300;			
		GVL.st_mcAxis[0].mcMoveAbsolute.Execute := TRUE;
		IF GVL.st_mcAxis[0].mcMoveAbsolute.Done THEN
			GVL.st_mcAxis[0].mcMoveAbsolute.Execute := FALSE;
			GVL.iFRtest := 6;
		END_IF	   
	5://delay
		ton_delay.IN := TRUE;
		IF ton_delay.Q THEN
			ton_delay.IN := FALSE;
			GVL.iFRtest := 6;
		END_IF
	6://valve retract
		valve := FALSE;
		IF retracted THEN
			GVL.iFRtest := 7;
		END_IF	
	7://valve extend
		valve := TRUE;
		IF extended THEN
			GVL.iFRtest := 8;
		END_IF	
	8://delay
		ton_delay.IN := TRUE;
		IF ton_delay.Q THEN
			ton_delay.IN := FALSE;
			GVL.iFRtest := 9;
		END_IF
	9://open positon
		GVL.st_mcAxis[0].rActualPosSet := 102.8;
		GVL.st_mcAxis[0].rVelocitySet := 300;			
		GVL.st_mcAxis[0].mcMoveAbsolute.Execute := TRUE;
		IF GVL.st_mcAxis[0].mcMoveAbsolute.Done THEN
			GVL.st_mcAxis[0].mcMoveAbsolute.Execute := FALSE;
			GVL.iFRtest := 10;
		END_IF
	10:
		GVL.iFRtest := 0;
END_CASE
*)



]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="449" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="799" Count="0" />
      <LineId Id="824" Count="0" />
      <LineId Id="823" Count="0" />
      <LineId Id="821" Count="1" />
      <LineId Id="828" Count="1" />
      <LineId Id="838" Count="0" />
      <LineId Id="832" Count="3" />
      <LineId Id="837" Count="0" />
      <LineId Id="836" Count="0" />
      <LineId Id="831" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="899" Count="0" />
      <LineId Id="860" Count="1" />
      <LineId Id="868" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="869" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="874" Count="0" />
      <LineId Id="873" Count="0" />
      <LineId Id="876" Count="0" />
      <LineId Id="875" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="877" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="879" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="881" Count="0" />
      <LineId Id="884" Count="0" />
      <LineId Id="883" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="885" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="891" Count="0" />
      <LineId Id="896" Count="0" />
      <LineId Id="895" Count="0" />
      <LineId Id="898" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="1057" Count="57" />
      <LineId Id="974" Count="0" />
      <LineId Id="1115" Count="0" />
      <LineId Id="980" Count="1" />
      <LineId Id="863" Count="0" />
      <LineId Id="862" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="904" Count="5" />
      <LineId Id="913" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="914" Count="8" />
      <LineId Id="903" Count="0" />
      <LineId Id="930" Count="8" />
      <LineId Id="924" Count="0" />
      <LineId Id="939" Count="8" />
      <LineId Id="925" Count="0" />
      <LineId Id="948" Count="8" />
      <LineId Id="926" Count="1" />
      <LineId Id="978" Count="1" />
      <LineId Id="957" Count="0" />
      <LineId Id="983" Count="0" />
      <LineId Id="1139" Count="16" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1157" Count="11" />
      <LineId Id="1200" Count="0" />
      <LineId Id="1170" Count="26" />
      <LineId Id="984" Count="2" />
      <LineId Id="976" Count="0" />
      <LineId Id="958" Count="1" />
      <LineId Id="1055" Count="1" />
      <LineId Id="961" Count="1" />
      <LineId Id="1045" Count="2" />
      <LineId Id="1050" Count="2" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1053" Count="1" />
      <LineId Id="972" Count="0" />
      <LineId Id="969" Count="0" />
      <LineId Id="967" Count="0" />
      <LineId Id="928" Count="1" />
      <LineId Id="923" Count="0" />
      <LineId Id="900" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.M_mappingIO">
      <LineId Id="322" Count="0" />
      <LineId Id="212" Count="5" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="223" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="289" Count="2" />
      <LineId Id="273" Count="0" />
      <LineId Id="292" Count="2" />
      <LineId Id="274" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="3" />
      <LineId Id="226" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="309" Count="2" />
      <LineId Id="303" Count="0" />
      <LineId Id="312" Count="2" />
      <LineId Id="305" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="316" Count="2" />
      <LineId Id="307" Count="0" />
      <LineId Id="319" Count="1" />
      <LineId Id="308" Count="0" />
      <LineId Id="243" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="247" Count="3" />
      <LineId Id="242" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="264" Count="2" />
      <LineId Id="260" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="336" Count="2" />
      <LineId Id="333" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="267" Count="2" />
      <LineId Id="233" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="353" Count="2" />
      <LineId Id="343" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="345" Count="1" />
      <LineId Id="339" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="357" Count="0" />
      <LineId Id="5" Count="4" />
      <LineId Id="61" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="70" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="103" Count="46" />
      <LineId Id="101" Count="0" />
      <LineId Id="155" Count="2" />
      <LineId Id="154" Count="0" />
      <LineId Id="158" Count="3" />
      <LineId Id="167" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="168" Count="7" />
      <LineId Id="166" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="177" Count="2" />
      <LineId Id="176" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="207" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="193" Count="1" />
      <LineId Id="239" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="202" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="181" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.M_measuringLC">
      <LineId Id="5" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="19" Count="7" />
      <LineId Id="17" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="1" />
    </LineIds>
    <LineIds Name="MAIN.M_ReM">
      <LineId Id="60" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="6" />
      <LineId Id="22" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="24" Count="11" />
      <LineId Id="5" Count="0" />
      <LineId Id="181" Count="2" />
      <LineId Id="185" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="37" Count="10" />
      <LineId Id="190" Count="0" />
      <LineId Id="48" Count="11" />
      <LineId Id="36" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="187" Count="2" />
      <LineId Id="63" Count="9" />
      <LineId Id="92" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="108" Count="6" />
      <LineId Id="176" Count="4" />
      <LineId Id="161" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="162" Count="3" />
      <LineId Id="121" Count="0" />
      <LineId Id="138" Count="6" />
      <LineId Id="166" Count="9" />
      <LineId Id="151" Count="2" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.M_rfid">
      <LineId Id="58" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="39" Count="7" />
      <LineId Id="32" Count="6" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="1" />
    </LineIds>
    <LineIds Name="MAIN.runEveryCycle">
      <LineId Id="216" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="196" Count="0" />
      <LineId Id="194" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="198" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="98" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="133" Count="1" />
      <LineId Id="137" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="103" Count="3" />
      <LineId Id="109" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="145" Count="3" />
      <LineId Id="144" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="153" Count="2" />
      <LineId Id="152" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="161" Count="0" />
      <LineId Id="178" Count="4" />
      <LineId Id="177" Count="0" />
      <LineId Id="167" Count="6" />
      <LineId Id="166" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="38" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>